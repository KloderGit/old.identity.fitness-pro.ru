using identity.fitness_pro.ru.Configuration;
using identity.fitness_pro.ru.Configuration.Extensions;
using identity.fitness_pro.ru.Configuration.Models;
using identity.fitness_pro.ru.Models;
using IdentityServer4.Models;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Serilog;
using System;
using System.Collections.Generic;
using System.Security.Cryptography.X509Certificates;

namespace identity.fitness_pro.ru
{
    public class Startup
    {
        public IConfiguration Configuration { get; }
        public IConfiguration Settings { get; }
        public IHostingEnvironment Environment { get; }
        public ILoggerFactory LoggerFactory { get; }

        IServiceCollection Services { get; }

        public Startup(IConfiguration configuration, IHostingEnvironment environment)
        {
            Configuration = configuration;
            Environment = environment;

            var buildTypeIsTest = Configuration.GetValue<string>("build");

            Settings = new LoadExternalPrivateConfig().Load(Configuration.GetSection("PrivateConfigPath").Value);
        }

        public void ConfigureServices(IServiceCollection services)
        {
            MapExternalConfigToPoco(services);

            services.AddLogging();


            services.AddDbContext<ApplicationContext>(options => options.UseNpgsql(GetConnectionString()));

            services.AddDefaultIdentity<ApplicationUser>()
                .AddRoles<IdentityRole>()
                .AddEntityFrameworkStores<ApplicationContext>();


            var identityOptions = GetConfigObject<IdetitySettingModel>(services);
            List<IdentityResource> identities = new List<IdentityResource>(IdentityConfig.GetIdentities(identityOptions.Identities))
            {
                new IdentityResources.OpenId(),
                new IdentityResources.Email(),
                new IdentityResources.Phone(),
                new IdentityResources.Profile()
            };

            var apiOptions = GetConfigObject<ApiSettingModel>(services);
            var apies = ApiConfig.GetApis(apiOptions.Apies);

            var clientOptions = GetConfigObject<ClientSettingModel>(services);
            var clients = ClientsConfig.GetClients(clientOptions);

            var builder = services.AddIdentityServer()
                .AddInMemoryIdentityResources(identities)
                .AddInMemoryApiResources(apies)
                .AddInMemoryClients(clients)
                .AddAspNetIdentity<ApplicationUser>()
                .AddCertificat(Environment.IsDevelopment(), Configuration);
                //.AddProfileService<CustomProfileService>();

<<<<<<< HEAD
            if (Environment.IsDevelopment())
            {
                builder.AddDeveloperSigningCredential();
            }
            else
            {
                var certificatPath = Configuration.GetSection("SettingsFilePath").Value + @"\STAR_fitness-pro_ru.pfx";
                builder.AddSigningCredential(new X509Certificate2(certificatPath, ""));
            }
=======
>>>>>>> UseUserSecret

            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);
        }

        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseStaticFiles();
            app.UseCookiePolicy();
            app.UseAuthentication();

            app.UseIdentityServer();

            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller=Home}/{action=Index}/{id?}");
            });
        }

        void MapExternalConfigToPoco(IServiceCollection services)
        {
            services.Configure<ClientSettingModel>(Settings);
            services.Configure<ApiSettingModel>(Settings);
            services.Configure<IdetitySettingModel>(Settings);
            services.Configure<ConnectionStringModel>(Settings);
            services.Configure<IdentityConfigurationModel>(Settings);
        }

        string GetConnectionString()
        {
            string value = String.Empty;

            if (Environment.IsDevelopment())
            {
                value = Configuration.GetConnectionString("PostgreSQL");
            }
            else
            {
                var confOptions = GetConfigObject<IdentityConfigurationModel>(Services);
                value = confOptions.Build.Release.ConnectionStrings["PostgreSQL"];
            }

            return value;
        }

        T GetConfigObject<T>(IServiceCollection services) where T: class, new()
        {
            var serviceProvider = services.BuildServiceProvider();
            return serviceProvider.GetService<IOptions<T>>().Value;
        }
    }
}
